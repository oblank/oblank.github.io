<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白板博客</title>
  
  <subtitle>https://oblank.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oblank.com/"/>
  <updated>2022-07-06T13:33:10.936Z</updated>
  <id>https://oblank.com/</id>
  
  <author>
    <name>oBlank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>仅79元，修复Airpods Pro导致耳朵过敏的民间配方</title>
    <link href="https://oblank.com/2022/07/06/airpods-hurt-my-ears/"/>
    <id>https://oblank.com/2022/07/06/airpods-hurt-my-ears/</id>
    <published>2022-07-06T13:22:58.000Z</published>
    <updated>2022-07-06T13:33:10.936Z</updated>
    
    <content type="html"><![CDATA[<p>Airpods Pro的体验是真的好，美观、便携，手机电脑自动切换，降噪、空间音频的体验也很不错，逃不过的“真香定律”。</p><h2 id="耳朵问题"><a href="#耳朵问题" class="headerlink" title="耳朵问题"></a>耳朵问题</h2><p>一开始以为是游泳导致的，诸如进水、环境不卫生之类的，表现为耳朵发炎，伴有液体，且反复发生。</p><p>用了一些滴液，看了专科医生，也仅能维护短暂的时间。停止游泳后，问题依旧，慢慢观察才怀疑上Airpods，知乎上也有很多人大倒苦水，<a href="https://www.zhihu.com/search?type=content&amp;q=airpods%20%E5%8F%91%E7%82%8E" target="_blank" rel="noopener">例如这些</a>。</p><p>网上有些文章或视频会告诉你要注意卫生，经常清洁耳机，在这样的理论指导下我试过了对其全身酒精SPA，开水炖煮耳塞等，没什么卵用，耳机就这样闲置了大半年。</p><p>一度怀疑是因为 <code>Made in Vietnam</code>的质量不过关导致的。</p><h2 id="过敏原因"><a href="#过敏原因" class="headerlink" title="过敏原因"></a>过敏原因</h2><p>后来有意识地搜索了下相关文章，《<a href="https://mp.weixin.qq.com/s/O1mFoSpMs1V-ySUqLMa1hQ" target="_blank" rel="noopener">你正在使用的苹果耳机AirPods Pro，可能是引发耳朵过敏性接触性皮炎的元凶？</a>》这篇文章比较好地解释了发生的原因，专业人员进行了过敏性的分析，评估出了耳机各部分对过敏的影响，摘录如下：</p><blockquote><p><img src="/images/airpods_pro.png" alt=""><br>测试了患者会接触到到 AirPods Pro 的三个部分，这些部分在佩戴时会与皮肤接触，即<strong>硅耳尖、耳机的白色塑料外壳和黑色不锈钢声学网（上图a、b、c）</strong>。</p><p>测试结果（见下图）显示<strong>患者对硅耳尖反应强烈</strong>，对白色塑料外壳反应微弱。这些被认为是当前症状相关的。她对黑色不锈钢声网也有怀疑（+/+）反应。<br><img src="/images/airpods_pro_2.png" alt=""></p></blockquote><h3 id="苹果的官方建议"><a href="#苹果的官方建议" class="headerlink" title="苹果的官方建议"></a>苹果的官方建议</h3><p>苹果在其官网公开了一些<a href="https://support.apple.com/zh-cn/HT211158" target="_blank" rel="noopener">过敏性材料的描述</a>，但那几乎不是常人所能理解和检测的。主要涉及的材料为<code>镍</code>、<code>丙烯酸酯</code>（这是啥玩意儿？）。它同时提醒到：</p><blockquote><p>如果您的皮肤出现<strong>发红、肿胀、发痒</strong>或任何其他刺激反应，建议您咨询医生后再决定要不要继续佩戴 AirPods、EarPods 或 Beats 设备。</p></blockquote><p>从网友的经验来看，对<strong>硅胶耳塞过敏是主要的原因，这意味着换其他品牌的耳机大概率也是会过敏的</strong>，为啥我这么肯定呢，因为我换过！！！！</p><h2 id="独家配方"><a href="#独家配方" class="headerlink" title="独家配方"></a>独家配方</h2><p>知道了原因后，解决的方法也很简单，<strong>换掉硅胶耳尖，隔离开耳机与耳朵的接触</strong>。</p><blockquote><p>难得是什么样的耳塞质量上会超过苹果官方？</p></blockquote><p>经过试验，最终我的Airpods被裹成了木乃伊，经过一天一夜的佩戴，效果却是立杆见影，无任何不适：</p><p><img src="/images/airpods_pro_3.png" alt=""></p><p>具体采购清单如下，<strong>总价79元</strong>：</p><table><thead><tr><th>替换品</th><th>商品</th><th>价格</th><th>购买链接</th></tr></thead><tbody><tr><td>耳塞</td><td>绯乐Latex-AR700耳塞</td><td>69到手</td><td><a href="https://m.tb.cn/h.fDo1WNd?tk=8Lpy2psUUuk" target="_blank" rel="noopener">淘宝</a></td></tr><tr><td>-</td><td>弘生透气防过敏无纺布</td><td>9.9</td><td><a href="https://item.m.jd.com/product/31014075035.html?&amp;utm_source=iosapp&amp;utm_medium=appshare&amp;utm_campaign=t_335139774&amp;utm_term=CopyURL&amp;ad_od=share&amp;utm_user=plusmember&amp;gx=RnExlTQKaj3Ry9RB5tx2VGzM" target="_blank" rel="noopener">京东</a></td></tr></tbody></table><p><em>以上方案适用于所有硅胶过敏的情况，其他耳机要找相适配的耳塞。</em></p><p>实际上，我还尝试过其他耳塞+防水胶布（是真薄），还采购了笛膜（纯天然还够薄），测试后再更新。</p><p>苦了我的耳朵！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Airpods Pro的体验是真的好，美观、便携，手机电脑自动切换，降噪、空间音频的体验也很不错，逃不过的“真香定律”。&lt;/p&gt;
&lt;h2 id=&quot;耳朵问题&quot;&gt;&lt;a href=&quot;#耳朵问题&quot; class=&quot;headerlink&quot; title=&quot;耳朵问题&quot;&gt;&lt;/a&gt;耳朵问题&lt;/
      
    
    </summary>
    
      <category term="闲话" scheme="https://oblank.com/categories/%E9%97%B2%E8%AF%9D/"/>
    
    
      <category term="苹果" scheme="https://oblank.com/tags/%E8%8B%B9%E6%9E%9C/"/>
    
      <category term="困恼" scheme="https://oblank.com/tags/%E5%9B%B0%E6%81%BC/"/>
    
      <category term="Airpods" scheme="https://oblank.com/tags/Airpods/"/>
    
  </entry>
  
  <entry>
    <title>前公司两份PPT分享</title>
    <link href="https://oblank.com/2018/12/10/keynotes-gather/"/>
    <id>https://oblank.com/2018/12/10/keynotes-gather/</id>
    <published>2018-12-10T08:12:37.000Z</published>
    <updated>2019-08-02T02:39:35.145Z</updated>
    
    <content type="html"><![CDATA[<p>整理电脑时看到之前在公司分享用的两份PPT，做的挺好看的，记录下来。一份是给市场人员介绍基本IT知识用的，一个是给小组成员总结经验用的。</p><p><em>如下：</em></p><p><img src="https://qiniu.ivrfun.com/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%BB%84%E4%BC%9A%E8%AE%AE%E8%A6%81%E7%82%B917.06.13.001.jpeg" alt="图片"><br><img src="https://qiniu.ivrfun.com/%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%88%9D%E6%8E%A2_%E9%82%93%E7%BE%BD%E6%B5%A9_2017.02.17.001.jpeg" alt="图片"><br><img src="https://qiniu.ivrfun.com/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%BB%84%E4%BC%9A%E8%AE%AE%E8%A6%81%E7%82%B917.06.13.0012.jpeg" alt="图片"></p><h4 id="PDF版："><a href="#PDF版：" class="headerlink" title="PDF版："></a>PDF版：</h4><p><a href="https://qiniu.ivrfun.com/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%BB%84%E4%BC%9A%E8%AE%AE%E8%A6%81%E7%82%B917.06.13.pdf" target="_blank" rel="noopener">《后台开发组会议要点2017.06.13》PDF版</a><br><a href="https://qiniu.ivrfun.com/%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%88%9D%E6%8E%A2_%E9%82%93%E7%BE%BD%E6%B5%A9_2017.02.17.pdf" target="_blank" rel="noopener">《互联网安全初探_邓羽浩_2017.02.17》PDF版</a></p><h4 id="KeyNote版："><a href="#KeyNote版：" class="headerlink" title="KeyNote版："></a>KeyNote版：</h4><p><a href="https://qiniu.ivrfun.com/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%BB%84%E4%BC%9A%E8%AE%AE%E8%A6%81%E7%82%B917.06.13.key" target="_blank" rel="noopener">《后台开发组会议要点2017.06.13》KeyNote版</a><br><a href="https://qiniu.ivrfun.com/%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%88%9D%E6%8E%A2_%E9%82%93%E7%BE%BD%E6%B5%A9_2017.02.17.key" target="_blank" rel="noopener">《互联网安全初探_邓羽浩_2017.02.17》KeyNote版</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理电脑时看到之前在公司分享用的两份PPT，做的挺好看的，记录下来。一份是给市场人员介绍基本IT知识用的，一个是给小组成员总结经验用的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如下：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniu.ivrfun.com/%E5%90
      
    
    </summary>
    
      <category term="开发" scheme="https://oblank.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="KeyNote" scheme="https://oblank.com/tags/KeyNote/"/>
    
      <category term="PDF" scheme="https://oblank.com/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>Hypleder Fabric 体验</title>
    <link href="https://oblank.com/2018/06/14/fabric-install/"/>
    <id>https://oblank.com/2018/06/14/fabric-install/</id>
    <published>2018-06-14T09:20:53.000Z</published>
    <updated>2019-08-02T02:39:35.144Z</updated>
    
    <content type="html"><![CDATA[<p>推荐选用云服务器，按流量付费，使用后及时销毁</p><p>注意选择香港区域的服务器，保证网络的联通，避免额外工作，这算是小小的经验吧，我这里选择的是腾讯云香港服务器（4核8G）。</p><blockquote><p>国内服务器可以使用ProxyChain4配合代理来无障碍安装软件</p></blockquote><p>注意服务器版本选择，因为要用到Docker，而根据经验CentOS最好使用7+的版本，我们这里选择的是7.4</p><p><em>根据文档来看，在Windows、Mac环境下都会多做一些额外工作，建议使用CentOS或Ubuntu这样的系统。</em></p><p>我所用系统内核：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux VM_***_centos 3.10.0-693.el7.x86_64</span><br></pre></td></tr></table></figure></p><blockquote><p>按官方文档安装系统环境</p></blockquote><p><a href="http://hyperledger-fabric.readthedocs.io/en/latest/prereqs.html" target="_blank" rel="noopener">http://hyperledger-fabric.readthedocs.io/en/latest/prereqs.html</a></p><h4 id="具体要求如下："><a href="#具体要求如下：" class="headerlink" title="具体要求如下："></a>具体要求如下：</h4><ul><li>Docker version 17.06.2-ce or greater.</li><li>Docker Compose version 1.14.0 or greater.</li><li>Go version 1.10.x is required.</li><li>Node.js - version 8.9.x or greater，9.x is not supported at this time.</li></ul><h4 id="安装DockerCE社区版"><a href="#安装DockerCE社区版" class="headerlink" title="安装DockerCE社区版"></a>安装DockerCE社区版</h4><p>参考官方文档 <a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p>确认Docker正常：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br><span class="line">Docker version 18.05.0-ce, build f150324</span><br></pre></td></tr></table></figure></p><h4 id="安装Docker-compose"><a href="#安装Docker-compose" class="headerlink" title="安装Docker-compose"></a>安装Docker-compose</h4><p>参考官方文档：<a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">https://docs.docker.com/compose/install/#install-compose</a></p><p>确认Docker-compose正常：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br><span class="line">docker-compose version 1.21.2, build a133471</span><br></pre></td></tr></table></figure></p><h4 id="安装-Go"><a href="#安装-Go" class="headerlink" title="安装 Go"></a>安装 Go</h4><p>Fabric是由Go开发的，智能合约Chaincode也是Go实现的</p><p>参考文档：<a href="https://golang.org/doc/install?download=go1.10.2.linux-amd64.tar.gz" target="_blank" rel="noopener">https://golang.org/doc/install?download=go1.10.2.linux-amd64.tar.gz</a></p><p>确定Go正常：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> version</span><br><span class="line"><span class="keyword">go</span> version go1<span class="number">.10</span><span class="number">.2</span> linux/amd64</span><br><span class="line"></span><br><span class="line"># test code</span><br><span class="line"><span class="keyword">go</span> run hello.<span class="keyword">go</span> </span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure></p><h4 id="Node-js-安装"><a href="#Node-js-安装" class="headerlink" title="Node.js 安装"></a>Node.js 安装</h4><p>这里使用NVM进行多版本管理</p><p>参考：<a href="https://github.com/creationix/nvm/blob/master/README.md" target="_blank" rel="noopener">https://github.com/creationix/nvm/blob/master/README.md</a></p><p>确认安装正常：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm install 8.9.4</span><br><span class="line">nvm use v8.9.4</span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure></p><h3 id="按文档安装Fabric"><a href="#按文档安装Fabric" class="headerlink" title="按文档安装Fabric"></a>按文档安装Fabric</h3><p><a href="http://hyperledger-fabric.readthedocs.io/en/latest/install.html" target="_blank" rel="noopener">http://hyperledger-fabric.readthedocs.io/en/latest/install.html</a></p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 如果系统没有GIT则先安装GIT</span><br><span class="line">sudo yum install git -y</span><br><span class="line"></span><br><span class="line"># 安装 Fabric</span><br><span class="line">curl -sSL https://goo.gl/6wtTN5 | bash -s 1.1.0</span><br></pre></td></tr></table></figure><p>没问题的话用<code>docker images</code>命令会看下列结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line"></span><br><span class="line">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world                    latest              e38bc07ac18e        6 weeks ago         1.85kB</span><br><span class="line">hyperledger/fabric-ca          latest              72617b4fa9b4        2 months ago        299MB</span><br><span class="line">hyperledger/fabric-ca          x86_64-1.1.0        72617b4fa9b4        2 months ago        299MB</span><br><span class="line">hyperledger/fabric-tools       latest              b7bfddf508bc        2 months ago        1.46GB</span><br><span class="line">hyperledger/fabric-tools       x86_64-1.1.0        b7bfddf508bc        2 months ago        1.46GB</span><br><span class="line">hyperledger/fabric-orderer     latest              ce0c810df36a        2 months ago        180MB</span><br><span class="line">hyperledger/fabric-orderer     x86_64-1.1.0        ce0c810df36a        2 months ago        180MB</span><br><span class="line">hyperledger/fabric-peer        latest              b023f9be0771        2 months ago        187MB</span><br><span class="line">hyperledger/fabric-peer        x86_64-1.1.0        b023f9be0771        2 months ago        187MB</span><br><span class="line">hyperledger/fabric-javaenv     latest              82098abb1a17        2 months ago        1.52GB</span><br><span class="line">hyperledger/fabric-javaenv     x86_64-1.1.0        82098abb1a17        2 months ago        1.52GB</span><br><span class="line">hyperledger/fabric-ccenv       latest              c8b4909d8d46        2 months ago        1.39GB</span><br><span class="line">hyperledger/fabric-ccenv       x86_64-1.1.0        c8b4909d8d46        2 months ago        1.39GB</span><br><span class="line">hyperledger/fabric-zookeeper   latest              92cbb952b6f8        3 months ago        1.39GB</span><br><span class="line">hyperledger/fabric-zookeeper   x86_64-0.4.6        92cbb952b6f8        3 months ago        1.39GB</span><br><span class="line">hyperledger/fabric-kafka       latest              554c591b86a8        3 months ago        1.4GB</span><br><span class="line">hyperledger/fabric-kafka       x86_64-0.4.6        554c591b86a8        3 months ago        1.4GB</span><br><span class="line">hyperledger/fabric-couchdb     latest              7e73c828fc5b        3 months ago        1.56GB</span><br><span class="line">hyperledger/fabric-couchdb     x86_64-0.4.6        7e73c828fc5b        3 months ago        1.56GB</span><br></pre></td></tr></table></figure><p>添加PATH环境变理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 具体路径以你实际情况为准</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/root/go/src/fabric-samples/bin</span><br></pre></td></tr></table></figure></p><h4 id="运行第一个测试网络"><a href="#运行第一个测试网络" class="headerlink" title="运行第一个测试网络"></a>运行第一个测试网络</h4><p>参考：<a href="http://hyperledger-fabric.readthedocs.io/en/latest/build_network.html" target="_blank" rel="noopener">http://hyperledger-fabric.readthedocs.io/en/latest/build_network.html</a></p><p>在<code>fabric-samples/first-network</code>目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./byfn.sh generate</span><br><span class="line">./byfn.sh up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直到出现下面的提示</span></span><br><span class="line">========= All GOOD, BYFN execution completed =========== </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> _____   _   _   ____   </span><br><span class="line">| ____| | \ | | |  _ \  </span><br><span class="line">|  _|   |  \| | | | | | </span><br><span class="line">| |___  | |\  | | |_| | </span><br><span class="line">|_____| |_| \_| |____/</span><br></pre></td></tr></table></figure><p>这个时候再使用使用<code>docker ps</code>，会出现如下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                                                                                                  COMMAND                  CREATED             STATUS              PORTS                                              NAMES</span><br><span class="line">61be9101c099        dev-peer1.org2.example.com-mycc-1.0-26c2ef32838554aac4f7ad6f100aca865e87959c9a126e86d764c8d01f8346ab   <span class="string">"chaincode -peer.add…"</span>   3 minutes ago       Up 3 minutes                                                           dev-peer1.org2.example.com-mycc-1.0</span><br><span class="line">eda8b0fd85ff        dev-peer0.org1.example.com-mycc-1.0-384f11f484b9302df90b453200cfb25174305fce8f53f4e94d45ee3b6cab0ce9   <span class="string">"chaincode -peer.add…"</span>   3 minutes ago       Up 3 minutes                                                           dev-peer0.org1.example.com-mycc-1.0</span><br><span class="line">6107fb4406fc        dev-peer0.org2.example.com-mycc-1.0-15b571b3ce849066b7ec74497da3b27e54e0df1345daff3951b94245ce09c42b   <span class="string">"chaincode -peer.add…"</span>   4 minutes ago       Up 4 minutes                                                           dev-peer0.org2.example.com-mycc-1.0</span><br><span class="line">b8204bfc0734        hyperledger/fabric-tools:latest                                                                        <span class="string">"/bin/bash"</span>              4 minutes ago       Up 4 minutes                                                           cli</span><br><span class="line">83ff712ca3bd        hyperledger/fabric-peer:latest                                                                         <span class="string">"peer node start"</span>        4 minutes ago       Up 4 minutes        0.0.0.0:8051-&gt;7051/tcp, 0.0.0.0:8053-&gt;7053/tcp     peer1.org1.example.com</span><br><span class="line">677a3fc1c6c7        hyperledger/fabric-peer:latest                                                                         <span class="string">"peer node start"</span>        4 minutes ago       Up 4 minutes        0.0.0.0:7051-&gt;7051/tcp, 0.0.0.0:7053-&gt;7053/tcp     peer0.org1.example.com</span><br><span class="line">193de4b51d5a        hyperledger/fabric-peer:latest                                                                         <span class="string">"peer node start"</span>        4 minutes ago       Up 4 minutes        0.0.0.0:9051-&gt;7051/tcp, 0.0.0.0:9053-&gt;7053/tcp     peer0.org2.example.com</span><br><span class="line">ebafff254a5b        hyperledger/fabric-orderer:latest                                                                      <span class="string">"orderer"</span>                4 minutes ago       Up 4 minutes        0.0.0.0:7050-&gt;7050/tcp                             orderer.example.com</span><br><span class="line">ebe3b1c8f9e8        hyperledger/fabric-peer:latest                                                                         <span class="string">"peer node start"</span>        4 minutes ago       Up 4 minutes        0.0.0.0:10051-&gt;7051/tcp, 0.0.0.0:10053-&gt;7053/tcp   peer1.org2.example.com</span><br></pre></td></tr></table></figure><p>简洁模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps --format "&#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Names&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line">61be9101c099    dev-peer1.org2.example.com-mycc-1.0</span><br><span class="line">eda8b0fd85ff    dev-peer0.org1.example.com-mycc-1.0</span><br><span class="line">6107fb4406fc    dev-peer0.org2.example.com-mycc-1.0</span><br><span class="line">b8204bfc0734    cli</span><br><span class="line">83ff712ca3bd    peer1.org1.example.com</span><br><span class="line">677a3fc1c6c7    peer0.org1.example.com</span><br><span class="line">193de4b51d5a    peer0.org2.example.com</span><br><span class="line">ebafff254a5b    orderer.example.com</span><br><span class="line">ebe3b1c8f9e8    peer1.org2.example.com</span><br></pre></td></tr></table></figure><p>这样就模拟了一个简单的区块链网络，它有1个排序机构（order org），2个节点组织（peer org）每个组织有2个节点（peer）。</p><p>上面的组织机构定义在<code>configtx.yaml</code>文件中，而各个容器的拓扑关系定义在<code>crypto-config.yaml</code>文件中，使用 <code>./byfn.sh down</code> 可以关闭这个网络。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推荐选用云服务器，按流量付费，使用后及时销毁&lt;/p&gt;
&lt;p&gt;注意选择香港区域的服务器，保证网络的联通，避免额外工作，这算是小小的经验吧，我这里选择的是腾讯云香港服务器（4核8G）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;国内服务器可以使用ProxyChain4配合代理来无
      
    
    </summary>
    
      <category term="开发" scheme="https://oblank.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="fabric" scheme="https://oblank.com/tags/fabric/"/>
    
      <category term="blockchain" scheme="https://oblank.com/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>React Native 入门问题集</title>
    <link href="https://oblank.com/2018/04/09/react-native-questions/"/>
    <id>https://oblank.com/2018/04/09/react-native-questions/</id>
    <published>2018-04-09T10:17:53.000Z</published>
    <updated>2019-08-02T02:39:35.145Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些自己入门遇到的问题与解决方法</p><h2 id="怎么将navigation传递到子级组件？"><a href="#怎么将navigation传递到子级组件？" class="headerlink" title="怎么将navigation传递到子级组件？"></a>怎么将navigation传递到子级组件？</h2><p>当需要在子组件中使用<code>navigation</code>导航时，一种方法是直接在引入组件时将 navigation 作为props传递，另一种是使用 <code>withNavigation</code>，后者更优雅。</p><h3 id="方法一：引用时传递"><a href="#方法一：引用时传递" class="headerlink" title="方法一：引用时传递"></a>方法一：引用时传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Component navigation=&#123;this.props.navigation&#125; ...otherProps /&gt;</span><br></pre></td></tr></table></figure><h3 id="方法二：使用-withNavigation，-参见官方文档"><a href="#方法二：使用-withNavigation，-参见官方文档" class="headerlink" title="方法二：使用 withNavigation， 参见官方文档"></a>方法二：使用 <code>withNavigation</code>， <a href="https://reactnavigation.org/docs/connecting-navigation-prop.html" target="_blank" rel="noopener">参见官方文档</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;  </span><br><span class="line">import &#123; Button &#125; from &apos;react-native&apos;;  </span><br><span class="line">import &#123; withNavigation &#125; from &apos;react-navigation&apos;;  </span><br><span class="line"></span><br><span class="line">class Component extends React.Component &#123;  </span><br><span class="line">render() &#123;  </span><br><span class="line">return &lt;Button title=&quot;Back&quot; onPress=&#123;() =&gt; &#123; this.props.navigation.goBack() &#125;&#125; /&gt;;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">// 用withNavigation包一下</span><br><span class="line">export default withNavigation(Component);</span><br></pre></td></tr></table></figure><p>然后在引入时更直接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Component ...otherProps /&gt;</span><br></pre></td></tr></table></figure></p><h2 id="RN在iOS真机、模拟器调试时网络兼容问题"><a href="#RN在iOS真机、模拟器调试时网络兼容问题" class="headerlink" title="RN在iOS真机、模拟器调试时网络兼容问题"></a>RN在iOS真机、模拟器调试时网络兼容问题</h2><p>在RN生成的XCode项目里，默认是通过远程方式调试，只要手机、模拟器处于同一网络即可，但我们的手机极有可能会切换网络（譬如上下班、吃饭、上厕所…等等），而这会导到远程调试的应用无法打开，可以兼容处理。</p><p>打开XCode项目，修改 <code>AppDelegate.m</code>，将原有的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil];</span><br></pre></td></tr></table></figure></p><p>修改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#if TARGET_IPHONE_SIMULATOR</span><br><span class="line">  // remote debug</span><br><span class="line"> jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index&quot; fallbackResource:nil];</span><br><span class="line"> #else</span><br><span class="line">  // release</span><br><span class="line"> jsCodeLocation = [[NSBundle  mainBundle] URLForResource:@&quot;main&quot;  withExtension:@&quot;jsbundle&quot;];</span><br><span class="line"> #endif</span><br></pre></td></tr></table></figure></p><p>这会将真机像发布时一样把文件打包进APP，不受网络切换影响</p><h2 id="获取组件的屏幕位置"><a href="#获取组件的屏幕位置" class="headerlink" title="获取组件的屏幕位置"></a>获取组件的屏幕位置</h2><p>当使用<code>react-native-modal-popover</code>组件时，有一个参数<code>fromRect</code>用来指明组件的位置，这时候我们取要获取组件的位置，使用<code>NativeModules.UIManager.measure</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;; </span><br><span class="line">import &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  TouchableOpacity,</span><br><span class="line">  findNodeHandle,</span><br><span class="line">  NativeModules </span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line">import Popover, &#123; PopoverTouchable &#125; from &apos;react-native-modal-popover&apos;;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">const handle = findNodeHandle(this.refs[ &apos;popoverAnchor&apos; ]); </span><br><span class="line">if (handle) &#123;</span><br><span class="line">    NativeModules.UIManager.measure(handle, (x0, y0, width, height, x, y) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">popoverAnchor: &#123; x, y, width, height &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">  &#125;); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">&lt;SimpleLineIcons</span><br><span class="line">    name=&quot;options&quot;</span><br><span class="line">    ref=&quot;popoverAnchor&quot;</span><br><span class="line">    ...otherProps</span><br><span class="line">/&gt;</span><br><span class="line">&lt;Popover</span><br><span class="line">    visible=&#123;this.state.showPopover&#125;</span><br><span class="line">    fromRect=&#123;this.state.popoverAnchor&#125;</span><br><span class="line">    ...otherProps</span><br><span class="line">&gt;</span><br><span class="line">    &#123;children&#125;</span><br><span class="line">&lt;/Popover&gt;</span><br></pre></td></tr></table></figure></p><h2 id="基于webview实现简易浏览器"><a href="#基于webview实现简易浏览器" class="headerlink" title="基于webview实现简易浏览器"></a>基于webview实现简易浏览器</h2><p>在APP内经常需要打开一些URL链接，如果通过外部浏览器打开、返回体验不好，一般会做一个内部的导航，用RN的WebView组件很容易实现，主要是利用<code>onNavigationStateChange</code>获得各种状态并处理各导航菜单的表现，同时利用<code>navigation.setParams</code>动态设置浏览器的标题栏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">goBack() &#123;</span><br><span class="line">    this.refs[ WEB_VIEW_REF ].goBack(); &#125;</span><br><span class="line"></span><br><span class="line">goForward() &#123;</span><br><span class="line">    this.refs[ WEB_VIEW_REF ].goForward(); &#125;</span><br><span class="line"></span><br><span class="line">reload() &#123;</span><br><span class="line">    self.refs[ WEB_VIEW_REF ].reload(); &#125;</span><br><span class="line"></span><br><span class="line">openShare() &#123;</span><br><span class="line">    Share.share(&#123; message: &apos;content&apos;, title: &apos;testshare&apos; &#125;)</span><br><span class="line">        .catch((error) =&gt; console.error(error)); &#125;</span><br><span class="line"></span><br><span class="line">openWithSafari() &#123;</span><br><span class="line">    Linking.openURL(this.state.currentUrl)</span><br><span class="line">        .catch(err =&gt; console.error(&apos;An error occurred&apos;, err)); &#125;</span><br><span class="line"></span><br><span class="line">onNavigationStateChange(navState) &#123;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">  backButtonEnabled : navState.canGoBack,</span><br><span class="line">  forwardButtonEnabled: navState.canGoForward,</span><br><span class="line">  currentUrl : navState.url,</span><br><span class="line">  status : navState.title,</span><br><span class="line">  loading : navState.loading,</span><br><span class="line">  scalesPageToFit : true</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 动态更新 headerTitle</span><br><span class="line">if (navState.title) &#123;</span><br><span class="line">this.props.navigation.setParams(&#123; title: navState.title &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;WebView</span><br><span class="line">    ref=&#123;WEB_VIEW_REF&#125;</span><br><span class="line">    source=&#123;&#123; uri: url &#125;&#125;</span><br><span class="line">    style=&#123;styles.webView&#125;</span><br><span class="line">    scalesPageToFit=&#123;true&#125;</span><br><span class="line">    startInLoadingState=&#123;true&#125;</span><br><span class="line">    onNavigationStateChange=&#123;(e) =&gt; this.onNavigationStateChange(e)&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;View style=&#123;styles.toolbar&#125;&gt;</span><br><span class="line">  &#123;/*退回*/&#125;</span><br><span class="line">  &#123;</span><br><span class="line">!this.state.backButtonEnabled &amp;&amp; (</span><br><span class="line">&lt;View style=&#123;[ styles.toolBtn ]&#125;&gt;</span><br><span class="line">&lt;SimpleLineIcons name=&apos;arrow-left&apos; size=&#123;18&#125; style=&#123;[ styles.headerIcon, styles.headerIconDisable ]&#125;/&gt;</span><br><span class="line">&lt;/View&gt;  )</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        this.state.backButtonEnabled &amp;&amp; (</span><br><span class="line">            &lt;TouchableOpacity style=&#123;styles.toolBtn&#125; onPress=&#123;() =&gt; this.goBack()&#125;&gt;</span><br><span class="line">&lt;SimpleLineIcons name=&apos;arrow-left&apos; size=&#123;18&#125; style=&#123;[ styles.headerIcon ]&#125;/&gt;</span><br><span class="line">    &lt;/TouchableOpacity&gt;  )</span><br><span class="line">    &#125;</span><br><span class="line">...other buttons</span><br><span class="line">&lt;/View&gt;</span><br></pre></td></tr></table></figure><h2 id="使用react-navigation的TabNavigator时Tab之间跳转不能正常返回的情况"><a href="#使用react-navigation的TabNavigator时Tab之间跳转不能正常返回的情况" class="headerlink" title="使用react-navigation的TabNavigator时Tab之间跳转不能正常返回的情况"></a>使用<code>react-navigation</code>的<code>TabNavigator</code>时Tab之间跳转不能正常返回的情况</h2><p>如果TabA、TabB同时是<code>StackNavigator</code>，当从一个TabA跳到另一个TabB里的某个路由时，返回时常常会处于TabB中而无法正常返回到TabA，一种方法是修改顶部左侧菜单自定义实现返回逻辑，但这种情况下右滑返回手势仍然不能正常返回到TabA。</p><p>换种思维，直接将TabA要跳转的页面引入到相应的Tab路由中，代码仍然是一套，只是配了两个路由，路由名字略微不同即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export const RouteHome = StackNavigator(&#123;</span><br><span class="line">  Home : &#123; screen: Views.Home &#125;,</span><br><span class="line">  HBrowser: &#123; screen: Views.Browser &#125;,</span><br><span class="line">  Scanner : &#123; screen: Views.Scanner &#125;, </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export const RouteSetting = StackNavigator(&#123;</span><br><span class="line">  Setting : &#123; screen: Views.Home &#125;,</span><br><span class="line">  Browser: &#123; screen: Views.Browser &#125;,</span><br><span class="line">  ScannerB : &#123; screen: Views.Scanner &#125;, </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面的 <code>HBrowser</code>、<code>Browser</code>用了相同的组件，但路由名不同，在<code>Home</code>路由中按需跳转<code>HBrowser</code>，在<code>Setting</code>中就按需跳转<code>Browser</code>，这样兼顾了代码复用与交互的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">&lt;Hyperlink</span><br><span class="line">  onPress=&#123; (url, text) =&gt; &#123;</span><br><span class="line">        if (navigation.state &amp;&amp; navigation.state.routeName === &apos;Home&apos;) &#123;</span><br><span class="line">            this.props.navigation.navigate(&apos;HBrowser&apos;, &#123;url: url, text: text&#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.props.navigation.navigate(&apos;Browser&apos;, &#123;url: url, text: text&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    linkStyle=&#123;styles.url&#125;</span><br><span class="line">&gt;</span><br><span class="line"> &lt;Text style=&#123;styles.content&#125; selectable=&#123;true&#125; selectable=&#123;true&#125;&gt;</span><br><span class="line">  &#123;item.content&#125;</span><br><span class="line"> &lt;/Text&gt; </span><br><span class="line">&lt;/Hyperlink&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><strong>UPDATE:</strong> 经测试，不同StackNavigator里可以包含同名路由，导航时会优先从该Stack里寻找路由，所以上面的路由在取名时不需要刻意规避，简化如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const BaseRoutes = &#123;</span><br><span class="line">  Browser: &#123; screen: Views.Browser &#125;,</span><br><span class="line">  Scanner : &#123; screen: Views.Scanner &#125;, </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const RouteHome = StackNavigator(&#123;</span><br><span class="line">  Home : &#123; screen: Views.Home &#125;,</span><br><span class="line">  ...BaseRoutes, </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export const RouteSetting = StackNavigator(&#123;</span><br><span class="line">  Setting : &#123; screen: Views.Home &#125;,</span><br><span class="line">  ...BaseRoutes, </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>导航时不再区分路由名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">&lt;Hyperlink</span><br><span class="line">  onPress=&#123; (url, text) =&gt; &#123;</span><br><span class="line">this.props.navigation.navigate(&apos;Browser&apos;, &#123;url: url, text: text&#125;)</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  linkStyle=&#123;styles.url&#125;</span><br><span class="line">&gt;</span><br><span class="line"> &lt;Text style=&#123;styles.content&#125; selectable=&#123;true&#125; selectable=&#123;true&#125;&gt;</span><br><span class="line">  &#123;item.content&#125;</span><br><span class="line"> &lt;/Text&gt; </span><br><span class="line">&lt;/Hyperlink&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><h2 id="StackNavigator里嵌套了TabNavigator"><a href="#StackNavigator里嵌套了TabNavigator" class="headerlink" title="StackNavigator里嵌套了TabNavigator"></a>StackNavigator里嵌套了TabNavigator</h2><p>如果TabNavigator里的Views是根据程序动态生成的，那边多半面临导航找不到路由的问题</p><p>同时如果组件既在TabNavigator里使用，也有可能直接在StackNavigator里使用，这个时候 <code>navigation</code>指向不同，需要特殊处理才能兼容</p><p>具体方法，参考：<a href="https://github.com/react-navigation/react-navigation/issues/335" target="_blank" rel="noopener">https://github.com/react-navigation/react-navigation/issues/335</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Community   : CommunityTabs, // 这个方法不能让子级最高层级的 TabBar的情况，譬如按需隐藏 </span><br><span class="line">Community : &#123; screen: (&#123; navigation &#125;) =&gt; &lt;TabsNavigator screenProps=&#123;&#123; navigation &#125;&#125;/&gt; &#125;,</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 调用时做一些处理</span><br><span class="line">navigate = (route, payload) =&gt; &#123;</span><br><span class="line">    if (this.props.screenProps) &#123;</span><br><span class="line">        this.props.screenProps.navigation.navigate(route, payload)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.props.navigation.navigate(route, payload)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一些自己入门遇到的问题与解决方法&lt;/p&gt;
&lt;h2 id=&quot;怎么将navigation传递到子级组件？&quot;&gt;&lt;a href=&quot;#怎么将navigation传递到子级组件？&quot; class=&quot;headerlink&quot; title=&quot;怎么将navigation传递到子级组件？&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="开发" scheme="https://oblank.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ReactNative" scheme="https://oblank.com/tags/ReactNative/"/>
    
      <category term="程序员" scheme="https://oblank.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>用Nginx代理解决一些问题总结</title>
    <link href="https://oblank.com/2018/04/09/things-about-nginx/"/>
    <id>https://oblank.com/2018/04/09/things-about-nginx/</id>
    <published>2018-04-09T10:17:53.000Z</published>
    <updated>2019-08-02T02:39:35.146Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下用Nginx代理解决的一些问题的思路。</p><p>小程序校验domain</p><p>docker暴露端口不够</p><p>WFG墙翻（反），外网不可以</p><p>websockt：ws变wss</p><h2 id="IPV6不支持的情况"><a href="#IPV6不支持的情况" class="headerlink" title="IPV6不支持的情况"></a>IPV6不支持的情况</h2><p>阿里云、腾讯云都不支持IPV6，如果代理时返回的IPV6将会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Address family not supported by protocol</span><br></pre></td></tr></table></figure></p><p>解决办法是在DNS后指定不返回IPV6地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolver 8.8.8.8 ipv6=off;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总结一下用Nginx代理解决的一些问题的思路。&lt;/p&gt;
&lt;p&gt;小程序校验domain&lt;/p&gt;
&lt;p&gt;docker暴露端口不够&lt;/p&gt;
&lt;p&gt;WFG墙翻（反），外网不可以&lt;/p&gt;
&lt;p&gt;websockt：ws变wss&lt;/p&gt;
&lt;h2 id=&quot;IPV6不支持的情况&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="开发" scheme="https://oblank.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nginx" scheme="https://oblank.com/tags/nginx/"/>
    
      <category term="运维" scheme="https://oblank.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记一：增长黑客</title>
    <link href="https://oblank.com/2016/04/11/growth-hancker/"/>
    <id>https://oblank.com/2016/04/11/growth-hancker/</id>
    <published>2016-04-11T13:43:53.000Z</published>
    <updated>2019-08-02T02:39:35.147Z</updated>
    
    <content type="html"><![CDATA[<p>最近读了几本运营营销相关的书籍，国内国外的作者都有，书里提到了不少案例，十分精彩，学习了不少新的观点理论，虽然还没读完但总觉得有必要记录一下。</p><h2 id="一些新概念"><a href="#一些新概念" class="headerlink" title="一些新概念"></a>一些新概念</h2><h3 id="MVP：最小化可行产品（Minimum-Viable-Product）"><a href="#MVP：最小化可行产品（Minimum-Viable-Product）" class="headerlink" title="MVP：最小化可行产品（Minimum Viable Product）"></a><code>MVP</code>：最小化可行产品（Minimum Viable Product）</h3><p>Idea is cheap，show me the product。</p><p>MVP要求的是在一个点子变成完整的产品之前，应该借助于现有一些平台或工具做出最基本的产品，然后投放给市场进行检验，经过市场反馈有效后再投入更多资源进行开发。MVP并不意味着主体功能的缺失或是体验上的粗糙。</p><p>书中提到就算是Goole大约也只有30%的想法经市场检验后确认是比较靠谱的，大多数人自认为有用的需求不过是一厢情愿。</p><blockquote><p>可以实践的方式：微信公众号，微信企业号；WrodPress博客系统；原型基础上做的模拟体验；做出效果视频看用户是否喜欢。</p></blockquote><h3 id="PMF：产品市场适配度（Product-Market-Fit）"><a href="#PMF：产品市场适配度（Product-Market-Fit）" class="headerlink" title="PMF：产品市场适配度（Product Market Fit）"></a><code>PMF</code>：产品市场适配度（Product Market Fit）</h3><p>产品是否有用，有多大用，市场说了算。有些产品有用，但可能是很小的一个受众，能找到那个小众群体才算达到PMF，没找到或是找了一群不相干的用户，基本上也是没用，严重甚至的会对产品的运营策略带来误判。</p><h3 id="Growth-Hacker：增长黑客"><a href="#Growth-Hacker：增长黑客" class="headerlink" title="Growth Hacker：增长黑客"></a><code>Growth Hacker</code>：增长黑客</h3><p>增长黑客指的是那些既有技术，又有产品、营销视觉的跨界人才，他们依靠分析产品的各种数据得出增长或是降低的原因，并提出优化方案，使产品、收入进行可持续的增长。</p><p>增长团队一般是工程师、数据科学家、产品、营销组成，是一个综合性团队，有些公司在此之上设立增长官<code>Growth Officer</code>，赋予更大的职责和权限。他们所采用的方法也称之为 Growth Hacking。</p><p>基本上这类人才很少，相关岗位的设置也多是大公司才有专门设置。据称 Facebook 的增长团队由CEO直接领导，作出了卓越贡献。</p><blockquote><p>可用的一些工具：Mixpanel，growingio.com，Google Analytics等类似平台</p></blockquote><p>附一段百科的介绍：</p><blockquote><p>增长黑客是介于技术和市场之间的新型团队角色，主要『依靠技术和数据』的力量来达成各种营销目标，而非传统意义上靠砸钱来获取用户的市场推广角色。他们能从单线思维者时常忽略的角度和难以企及的高度通盘考虑影响产品发展的因素，提出基于产品本身的改造和开发策略，以切实的依据、低廉的成本、可控的风险来达成用户增长、活跃度上升、收入额增加等商业目的。简单来说，就是『低成本』甚至零成本地用“技术”来让产品获得有效增长。</p></blockquote><h3 id="噪声用户-蝗虫用户"><a href="#噪声用户-蝗虫用户" class="headerlink" title="噪声用户 / 蝗虫用户"></a>噪声用户 / 蝗虫用户</h3><p>并不是所有用户是有意义的，比如女性社区里的大量爷们，企业应用里的个人用户，他们不是产品的服务对象，但却大量消耗相关的资源，对初创公司是非常不利的，社区类产品尤其不利。</p><p>有二次元网站为了过滤掉这些用户需要注册用户回答60多道题目，有的需要邀请，有的需要付费才能注册。</p><blockquote><p>可用的手段包括：邀请注册、付费注册、过滤非目标用户、权限控制等。</p></blockquote><h2 id="关于增长"><a href="#关于增长" class="headerlink" title="关于增长"></a>关于增长</h2><p>所谓增长就是在<code>曝光量</code>与<code>转化率</code>两件事上下功夫：SEO、反链、ASO、AD、内容营销、病毒、事件营销等是为了提高曝光量。交互方式、设计美丑、速度、文案等深刻地影响着注册到付费的转化率，不可小视，提高到理论上就是growth hack，细操起来是苦力活，过程与结果往往很有意思。</p><p>一般的产品体验的提升是靠观察与琢磨，growth hack更多靠数据+A/B test说话，比起单个营销事件的而言，GH有可持续操作的特点。<code>当然最基本的还是要讲产品的价值。</code>现在流行的社群概念对冷启动、增长、营销、售后关怀…整个流程都有可能全面的介入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近读了几本运营营销相关的书籍，国内国外的作者都有，书里提到了不少案例，十分精彩，学习了不少新的观点理论，虽然还没读完但总觉得有必要记录一下。&lt;/p&gt;
&lt;h2 id=&quot;一些新概念&quot;&gt;&lt;a href=&quot;#一些新概念&quot; class=&quot;headerlink&quot; title=&quot;一些新
      
    
    </summary>
    
      <category term="运营" scheme="https://oblank.com/categories/%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="growth hack" scheme="https://oblank.com/tags/growth-hack/"/>
    
      <category term="增长黑客" scheme="https://oblank.com/tags/%E5%A2%9E%E9%95%BF%E9%BB%91%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>为什么要重建博客?</title>
    <link href="https://oblank.com/2016/02/24/why-I-need-another-blog/"/>
    <id>https://oblank.com/2016/02/24/why-I-need-another-blog/</id>
    <published>2016-02-24T14:38:58.000Z</published>
    <updated>2019-08-02T02:39:35.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>没什么具体的原因，一是想深入学习MarkDown写作，二是想分享一些学习内容，三是<a href="http://github.com" target="_blank" rel="noopener">GitHub</a>可以免费搭建博客，不再为服务器与长城防火墙发愁。</p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>说起来之前的博客大约存在了6年(2008-2014)，好的时候每天都出一篇甚至好几篇，后来微博兴起，博客再也没有以前那么热闹了。再后来服务器过期，数据东挪西腾的，搞乱的有，搞掉的有，也就没什么兴趣再把博客维持下去，索性关掉。</p><h2 id="将来"><a href="#将来" class="headerlink" title="将来"></a>将来</h2><p>现在有了兴趣，不会写的太频繁，会是真正的想写一点东西的时候更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerlink&quot; title=&quot;缘由&quot;&gt;&lt;/a&gt;缘由&lt;/h2&gt;&lt;p&gt;没什么具体的原因，一是想深入学习MarkDown写作，二是想分享一些学习内容，三是&lt;a href=&quot;http://github.com&quot; t
      
    
    </summary>
    
      <category term="思考" scheme="https://oblank.com/categories/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="说明" scheme="https://oblank.com/tags/%E8%AF%B4%E6%98%8E/"/>
    
      <category term="博客" scheme="https://oblank.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="why" scheme="https://oblank.com/tags/why/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="https://oblank.com/2016/02/24/hello-world/"/>
    <id>https://oblank.com/2016/02/24/hello-world/</id>
    <published>2016-02-24T10:25:00.000Z</published>
    <updated>2019-08-02T02:39:35.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2><p>  1, ProductHunt<br>  2, HuntNew</p><h2 id="categories"><a href="#categories" class="headerlink" title="categories:"></a>categories:</h2><p>  1, 学习<br>  2, 思考<br>  3, 设计<br>  4, 运营</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tags&quot;&gt;&lt;a href=&quot;#tags&quot; class=&quot;headerlink&quot; title=&quot;tags:&quot;&gt;&lt;/a&gt;tags:&lt;/h2&gt;&lt;p&gt;  1, ProductHunt&lt;br&gt;  2, HuntNew&lt;/p&gt;
&lt;h2 id=&quot;categories&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="学习" scheme="https://oblank.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="思考" scheme="https://oblank.com/categories/%E5%AD%A6%E4%B9%A0/%E6%80%9D%E8%80%83/"/>
    
      <category term="设计" scheme="https://oblank.com/categories/%E5%AD%A6%E4%B9%A0/%E6%80%9D%E8%80%83/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="运营" scheme="https://oblank.com/categories/%E5%AD%A6%E4%B9%A0/%E6%80%9D%E8%80%83/%E8%AE%BE%E8%AE%A1/%E8%BF%90%E8%90%A5/"/>
    
    
      <category term="ProductHunt" scheme="https://oblank.com/tags/ProductHunt/"/>
    
      <category term="HuntNew" scheme="https://oblank.com/tags/HuntNew/"/>
    
  </entry>
  
</feed>
